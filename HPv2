import React, { useState } from 'react';

const FloorPlan = () => {
  const [selectedFloor, setSelectedFloor] = useState(1);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [showDimensions, setShowDimensions] = useState(true);
  const [showExterior, setShowExterior] = useState(false);
  const [showCosts, setShowCosts] = useState(false);

  // Scale: 1 foot = 2 pixels for display
  const scale = 2;
  
  const floors = {
    1: {
      name: "Ground Floor",
      rooms: [
        { id: 'foyer', name: 'Entry Foyer', x: 180, y: 80, width: 100, height: 80, area: '5x8 ft' },
        { id: 'living', name: 'Living Room', x: 280, y: 80, width: 180, height: 120, area: '9x12 ft' },
        { id: 'dining', name: 'Dining Area', x: 460, y: 80, width: 140, height: 100, area: '7x10 ft' },
        { id: 'kitchen', name: 'Kitchen', x: 460, y: 180, width: 160, height: 100, area: '8x10 ft' },
        { id: 'powder', name: 'Half Bath', x: 180, y: 160, width: 60, height: 80, area: '3x8 ft' },
        { id: 'garage', name: '1-Car Garage', x: 180, y: 240, width: 200, height: 120, area: '10x12 ft' },
        { id: 'laundry', name: 'Laundry/Utility', x: 380, y: 240, width: 80, height: 80, area: '4x8 ft' },
        { id: 'stairs1', name: 'Staircase', x: 380, y: 180, width: 80, height: 60, area: '4x6 ft' },
        { id: 'storage1', name: 'Storage', x: 380, y: 320, width: 80, height: 40, area: '4x4 ft' },
        { id: 'patio', name: 'Back Patio', x: 620, y: 160, width: 80, height: 120, area: '4x12 ft' },
        { id: 'pantry', name: 'Pantry', x: 620, y: 180, width: 40, height: 100, area: '2x10 ft' },
        { id: 'study', name: 'Home Office', x: 280, y: 200, width: 100, height: 80, area: '5x8 ft' }
      ]
    },
    2: {
      name: "Second Floor",
      rooms: [
        { id: 'master', name: 'Master Bedroom', x: 460, y: 80, width: 180, height: 140, area: '9x14 ft' },
        { id: 'master-bath', name: 'Master Bath', x: 460, y: 220, width: 100, height: 80, area: '5x8 ft' },
        { id: 'master-closet', name: 'Master Closet', x: 560, y: 220, width: 80, height: 80, area: '4x8 ft' },
        { id: 'bedroom2', name: 'Bedroom 2', x: 180, y: 80, width: 140, height: 120, area: '7x12 ft' },
        { id: 'bath2', name: 'Bath 2', x: 180, y: 200, width: 80, height: 80, area: '4x8 ft' },
        { id: 'closet2', name: 'Closet 2', x: 260, y: 200, width: 60, height: 80, area: '3x8 ft' },
        { id: 'bedroom3', name: 'Bedroom 3', x: 320, y: 80, width: 140, height: 120, area: '7x12 ft' },
        { id: 'bath3', name: 'Bath 3', x: 320, y: 200, width: 80, height: 80, area: '4x8 ft' },
        { id: 'closet3', name: 'Closet 3', x: 400, y: 200, width: 60, height: 80, area: '3x8 ft' },
        { id: 'bedroom4', name: 'Bedroom 4', x: 640, y: 80, width: 120, height: 100, area: '6x10 ft' },
        { id: 'bath4', name: 'Bath 4', x: 640, y: 180, width: 80, height: 80, area: '4x8 ft' },
        { id: 'closet4', name: 'Closet 4', x: 720, y: 180, width: 40, height: 80, area: '2x8 ft' },
        { id: 'bedroom5', name: 'Bedroom 5', x: 640, y: 260, width: 120, height: 100, area: '6x10 ft' },
        { id: 'bath5', name: 'Bath 5', x: 560, y: 300, width: 80, height: 60, area: '4x6 ft' },
        { id: 'closet5', name: 'Closet 5', x: 720, y: 260, width: 40, height: 100, area: '2x10 ft' },
        { id: 'bedroom6', name: 'Bedroom 6', x: 180, y: 280, width: 120, height: 80, area: '6x8 ft' },
        { id: 'bath6', name: 'Bath 6', x: 300, y: 280, width: 60, height: 80, area: '3x8 ft' },
        { id: 'closet6', name: 'Closet 6', x: 360, y: 280, width: 40, height: 80, area: '2x8 ft' },
        { id: 'stairs2', name: 'Staircase', x: 400, y: 280, width: 80, height: 60, area: '4x6 ft' },
        { id: 'hallway2', name: 'Hallway', x: 480, y: 300, width: 80, height: 60, area: '4x6 ft' },
        { id: 'balcony2', name: 'Balcony', x: 520, y: 40, width: 120, height: 40, area: '6x4 ft' }
      ]
    }
  };

  const roomColors = {
    'foyer': '#e8f4fd', 'living': '#fff2e6', 'dining': '#f0f8e6', 'kitchen': '#fdf2e9',
    'powder': '#f8f0ff', 'garage': '#f5f5f5', 'laundry': '#e6ffe6', 'pantry': '#fdf2e9',
    'master': '#ffe6f2', 'master-bath': '#f8f0ff', 'master-closet': '#fff0e6',
    'bedroom2': '#e6f3ff', 'bedroom3': '#e6f3ff', 'bedroom4': '#e6f3ff',
    'bedroom5': '#e6f3ff', 'bedroom6': '#e6f3ff', 
    'bath2': '#f8f0ff', 'bath3': '#f8f0ff', 'bath4': '#f8f0ff', 'bath5': '#f8f0ff', 'bath6': '#f8f0ff',
    'closet2': '#fff0e6', 'closet3': '#fff0e6', 'closet4': '#fff0e6', 'closet5': '#fff0e6', 'closet6': '#fff0e6',
    'hallway2': '#f9f9f9', 'study': '#fff9e6',
    'storage1': '#f0f0f0', 'patio': '#e6ffe6', 'balcony2': '#e6ffe6',
    'stairs1': '#ffeaa7', 'stairs2': '#ffeaa7'
  };

  const currentFloor = floors[selectedFloor];

  const handleRoomClick = (room) => {
    setSelectedRoom(selectedRoom?.id === room.id ? null : room);
  };

  const ExteriorView = () => (
    <div className="bg-gradient-to-b from-sky-200 to-green-100 p-4 rounded-lg">
      <svg width="800" height="400" viewBox="0 0 800 400" className="w-full h-auto border border-gray-400 bg-gradient-to-b from-sky-100 to-green-50 rounded">
        {/* Sky and ground */}
        <defs>
          <linearGradient id="skyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" stopColor="#87CEEB" />
            <stop offset="100%" stopColor="#E0F6FF" />
          </linearGradient>
          <linearGradient id="houseGradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" stopColor="#F8F8F8" />
            <stop offset="100%" stopColor="#E8E8E8" />
          </linearGradient>
        </defs>
        
        {/* Lot boundary */}
        <rect x="50" y="120" width="700" height="220" fill="url(#skyGradient)" stroke="#333" strokeWidth="2" strokeDasharray="5,5" />
        <rect x="50" y="280" width="700" height="60" fill="#7CB342" />
        
        {/* Simple landscaping */}
        <g>
          {/* Trees */}
          <ellipse cx="120" cy="260" rx="30" ry="25" fill="#2E7D32" />
          <rect x="117" y="270" width="6" height="15" fill="#8D6E63" />
          
          <ellipse cx="680" cy="270" rx="25" ry="20" fill="#388E3C" />
          <rect x="677" y="280" width="6" height="12" fill="#8D6E63" />
          
          {/* Simple flower beds */}
          <rect x="200" y="320" width="150" height="20" fill="#4CAF50" rx="10" />
          <circle cx="220" cy="325" r="3" fill="#FF5722" />
          <circle cx="240" cy="330" r="3" fill="#E91E63" />
          <circle cx="260" cy="325" r="3" fill="#9C27B0" />
          <circle cx="280" cy="330" r="3" fill="#FF9800" />
          
          <rect x="500" y="320" width="120" height="20" fill="#4CAF50" rx="10" />
          <circle cx="520" cy="325" r="3" fill="#795548" />
          <circle cx="540" cy="330" r="3" fill="#607D8B" />
          <circle cx="560" cy="325" r="3" fill="#FF5722" />
          <circle cx="580" cy="330" r="3" fill="#E91E63" />
        </g>
        
        {/* Modest 2-story house */}
        <g>
          {/* Ground floor */}
          <rect x="280" y="200" width="320" height="80" fill="url(#houseGradient)" stroke="#333" strokeWidth="2" />
          
          {/* Second floor */}
          <rect x="280" y="140" width="320" height="60" fill="url(#houseGradient)" stroke="#333" strokeWidth="2" />
          
          {/* Simple gable roof */}
          <path d="M 270 140 L 440 100 L 610 140 Z" fill="#8B4513" stroke="#333" strokeWidth="2" />
          
          {/* Front porch */}
          <rect x="250" y="200" width="30" height="80" fill="url(#houseGradient)" stroke="#333" strokeWidth="2" />
          <rect x="245" y="195" width="40" height="5" fill="#8B4513" />
          <rect x="255" y="200" width="4" height="80" fill="#8D6E63" />
          <rect x="265" y="200" width="4" height="80" fill="#8D6E63" />
        </g>
        
        {/* Windows and doors */}
        <g>
          {/* Ground floor windows */}
          <rect x="300" y="220" width="50" height="40" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="370" y="220" width="50" height="40" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="440" y="220" width="50" height="40" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="520" y="220" width="50" height="40" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          
          {/* Second floor windows */}
          <rect x="300" y="155" width="40" height="30" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="360" y="155" width="40" height="30" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="420" y="155" width="40" height="30" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="480" y="155" width="40" height="30" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          <rect x="540" y="155" width="40" height="30" fill="#4FC3F7" stroke="#2C3E50" strokeWidth="2" />
          
          {/* Front door */}
          <rect x="260" y="240" width="15" height="40" fill="#8B4513" stroke="#333" strokeWidth="1" />
          <circle cx="270" cy="258" r="1" fill="#333" />
          
          {/* Garage door */}
          <rect x="580" y="240" width="60" height="40" fill="#D3D3D3" stroke="#333" strokeWidth="2" />
          <line x1="590" y1="240" x2="590" y2="280" stroke="#333" strokeWidth="1" />
          <line x1="600" y1="240" x2="600" y2="280" stroke="#333" strokeWidth="1" />
          <line x1="610" y1="240" x2="610" y2="280" stroke="#333" strokeWidth="1" />
          <line x1="620" y1="240" x2="620" y2="280" stroke="#333" strokeWidth="1" />
          <line x1="630" y1="240" x2="630" y2="280" stroke="#333" strokeWidth="1" />
        </g>
        
        {/* Driveway */}
        <rect x="200" y="300" width="80" height="40" fill="#95A5A6" />
        <rect x="580" y="300" width="80" height="40" fill="#95A5A6" />
        
        {/* Simple exterior lighting */}
        <circle cx="260" cy="210" r="3" fill="#F39C12" />
        <circle cx="620" cy="210" r="3" fill="#F39C12" />
        
        {/* Labels */}
        <text x="440" y="50" textAnchor="middle" className="text-lg font-bold fill-gray-800">
          Modern 2-Story Family Home
        </text>
        <text x="60" y="110" className="text-sm font-medium fill-blue-600">
          LOT FRONTAGE (60')
        </text>
        <text x="30" y="220" className="text-sm font-medium fill-blue-600" transform="rotate(-90 30 220)">
          LOT DEPTH (35')
        </text>
        
        <g transform="translate(70, 160)">
          <circle cx="0" cy="0" r="12" fill="white" stroke="#333" strokeWidth="1" />
          <path d="M 0,-8 L 4,0 L 0,8 L -4,0 Z" fill="#E53E3E" />
          <text x="0" y="-18" textAnchor="middle" className="text-xs font-bold">N</text>
        </g>
      </svg>
    </div>
  );

  const CostBreakdown = () => (
    <div className="bg-gray-50 p-4 rounded-lg">
      <h3 className="text-lg font-semibold mb-4 text-center text-green-800">
        Cost-Effective Construction Estimate (GYD)
      </h3>
      
      <div className="space-y-4 text-sm">
        {/* ... (same cost breakdown content as previous answer) */}
      </div>
    </div>
  );

  const RecommendationsPanel = () => (
    <div className="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
      <h3 className="text-lg font-semibold mb-4 text-yellow-800">
        🏗️ Design Recommendations for Cost-Effective Construction
      </h3>
      
      <div className="grid md:grid-cols-2 gap-4 text-sm">
        {/* ... (same recommendations content as previous answer) */}
      </div>
    </div>
  );

  return (
    <div className="container mx-auto p-4">
      <div className="flex flex-col md:flex-row gap-6">
        <div className="flex-grow">
          <div className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex flex-wrap gap-4 mb-6 items-center">
              <div className="flex gap-2">
                {[1, 2].map(floor => (
                  <button
                    key={floor}
                    onClick={() => setSelectedFloor(floor)}
                    className={`px-4 py-2 rounded ${selectedFloor === floor 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gray-200 hover:bg-gray-300'}`}
                  >
                    Floor {floor}
                  </button>
                ))}
              </div>
              
              <div className="flex gap-4 items-center">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={showDimensions}
                    onChange={(e) => setShowDimensions(e.target.checked)}
                    className="w-4 h-4"
                  />
                  Show Dimensions
                </label>
                
                <button
                  onClick={() => setShowExterior(!showExterior)}
                  className={`px-4 py-2 rounded ${showExterior 
                    ? 'bg-green-600 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300'}`}
                >
                  {showExterior ? 'Hide Exterior' : 'Show Exterior'}
                </button>
                
                <button
                  onClick={() => setShowCosts(!showCosts)}
                  className={`px-4 py-2 rounded ${showCosts 
                    ? 'bg-purple-600 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300'}`}
                >
                  {showCosts ? 'Hide Costs' : 'Show Costs'}
                </button>
              </div>
            </div>

            {showExterior ? (
              <ExteriorView />
            ) : showCosts ? (
              <CostBreakdown />
            ) : (
              <div className="relative bg-gray-50 p-4 rounded border border-gray-300">
                <svg 
                  width="800" 
                  height="400" 
                  viewBox="0 0 800 400" 
                  className="w-full h-auto"
                >
                  {currentFloor.rooms.map(room => (
                    <g key={room.id}>
                      <rect
                        x={room.x}
                        y={room.y}
                        width={room.width}
                        height={room.height}
                        fill={roomColors[room.id]}
                        stroke={selectedRoom?.id === room.id ? "#2563eb" : "#666"}
                        strokeWidth={selectedRoom?.id === room.id ? 2 : 1}
                        className="cursor-pointer hover:stroke-blue-500"
                        onClick={() => handleRoomClick(room)}
                      />
                      {showDimensions && (
                        <text
                          x={room.x + room.width/2}
                          y={room.y + room.height/2}
                          textAnchor="middle"
                          dominantBaseline="middle"
                          className="text-[10px] font-medium fill-gray-700"
                        >
                          {room.area}
                        </text>
                      )}
                    </g>
                  ))}
                </svg>
                
                {selectedRoom && (
                  <div className="mt-4 p-3 bg-blue-50 rounded border border-blue-200">
                    <h3 className="font-semibold text-blue-800">{selectedRoom.name}</h3>
                    <p className="text-sm text-gray-700">Dimensions: {selectedRoom.area}</p>
                    <p className="text-sm text-gray-700">Floor: {currentFloor.name}</p>
                  </div>
                )}
              </div>
            )}
          </div>
          
          {!showExterior && !showCosts && <RecommendationsPanel />}
        </div>
      </div>
    </div>
  );
};

export default FloorPlan;
